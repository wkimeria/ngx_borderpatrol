pid        /tmp/nginx.pid;
daemon     off;

http {
  proxy_http_version 1.1;
  lua_package_path "../../build/usr/share/borderpatrol/?.lua;../../build/usr/share/lua/5.1/?.lua;;";
  lua_package_cpath "../../build/usr/lib/lua/5.1/?.so;;";
  limit_req_zone $binary_remote_addr zone=auth_zone:100m rate=100r/m;

  error_log  logs/error.log debug;
  log_format   main '$remote_addr - $remote_user [$time_local] $status '
    '"$request" $body_bytes_sent $request_time "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log logs/access.log main;

  ssl_prefer_server_ciphers on;
  ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers               ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-RC4-SHA:ECDHE-RSA-AES128-SHA:AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH;
  ssl_session_cache         shared:SSL:16m;
  ssl_session_timeout       10m;
  ssl_certificate           ../ssl/server.crt;
  ssl_certificate_key       ../ssl/server.key;

  # used to store and retrieve keys from memcached
  upstream session_store {
    server localhost:11211;
    keepalive 32;
  }

  # this is an app server protected by border patrol. If it returns a 401
  # when an attempt is made to access a protected resource, borderpatrol redirects
  # to the account service login
  upstream b {
    server localhost:9082;
  }

  # this is an app server protected by border patrol. If it returns a 401
  # when an attempt is made to access a protected resource, borderpatrol redirects
  # to the account service login
  upstream c {
    server localhost:9083;
  }

  # this is the account service. displays the login screen and also calls the auth service
  # to get a master token and a service token
  upstream account {
    server localhost:4567; # use this if you are running the mock account service
  }

  # Nginx Lua has no SSL support for cosockets. This is unfortunate.
  # This proxies all requests to use the native NGINX request, though
  # it's a little hacky and sort of dirty.
  upstream token_server {
    server localhost:9081; # Use this if you are running the mock keymaster service
  }

  # Service mappings, map service urls to service names
  init_by_lua 'service_mappings = {["/b"]="srsbsns", ["/c"]="enterprize", ["/account"]="auth"}
               subdomain_mappings = {business="srsbsns", enterprise="enterprize"}
               account_resource = "/account"
               health_checks = {account="/account/health", business="/b/health"}
               statsd_namespace = "borderpatrol"
               statsd_prefix = "staging"
               statsd_host = "localhost"
               statsd_port = 8125
               bp_version = "0.3.2"';

  # business.localhost => b
  server {
    listen 4443 ssl;
    server_name business.localhost
    root   html;

    include '../session.conf';
    include '../account.conf';
    include '../common_locations.conf';
    include '../service_locations.conf';

    location ~ ^/ {
      include '../location_defaults.conf';
      proxy_pass http://b;
    }
  }

  # enterprise.localhost => c
  server {
    listen 4443 ssl;
    server_name enterprise.localhost
    root   html;

    include '../session.conf';
    include '../account.conf';
    include '../common_locations.conf';
    include '../service_locations.conf';

    location ~ ^/ {
      include '../location_defaults.conf';
      proxy_pass http://c;
    }
  }

  # uri-resource based routing localhost/b, localhost/c, localhost/account
  server {
    listen  4443 default_server ssl;
    root   html;

    include '../session.conf';
    include '../common_locations.conf';
    include '../service_locations.conf';

    location = / {
      limit_req zone=auth_zone burst=25;
      if ($request_method = POST ) {
        content_by_lua_file '../../build/usr/share/borderpatrol/authorize.lua';
      }
      if ($request_method = GET ) {
        return 301 $scheme://$host:$server_port/account/settings;
      }
    }

    # This should be the last location directive, designed to capture any
    # uri's not previously matched
    location ~ ^/.* {
      return 302 $scheme://$host:$server_port/account/not_found;
    }
  }
}

events {
  worker_connections  40;
}

# vim: ft=conf
